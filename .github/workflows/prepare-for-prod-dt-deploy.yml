name: Prepare for DT Production Environment Deployment

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
    branches:
      - main

permissions:
  id-token: write # allows the JWT to be requested from GitHub's OIDC provider
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  report-coverage:
    name: Report Code Coverage
    if: github.event_name == 'push'
    uses: ./.github/workflows/dt-test-and-report-code-coverage.yml
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  generate-tag-names:
    runs-on: ubuntu-latest
    name: Generate Tag Names
    # Only merged pull requests from release candidate branches must trigger
    if: ((startsWith(github.event.pull_request.head.ref, 'release/') || startsWith(github.event.pull_request.head.ref, 'hotfix-release/')) && github.event.pull_request.merged == true)
    outputs:
      tag_name: ${{ steps.gen_tag_names.outputs.tag_name }}
      tag_name_ut: ${{ steps.gen_tag_names.outputs.tag_name_ut }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.1
        with:
          fetch-depth: 1

      - name: Generate Tag Names
        id: gen_tag_names
        run: |
          tag_name=$(jq -r .version package.json)
          echo "Tag Name: $tag_name"
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT

  build-transformer-image:
    name: Build Transformer Docker Image - Prod
    # Only merged pull requests from release candidate branches must trigger
    if: ((startsWith(github.event.pull_request.head.ref, 'release/') || startsWith(github.event.pull_request.head.ref, 'hotfix-release/')) && github.event.pull_request.merged == true)
    needs: [generate-tag-names]
    uses: ./.github/workflows/build-push-docker-image.yml
    with:
      build_tag: rudderstack/rudder-transformer:${{ needs.generate-tag-names.outputs.tag_name }}
      push_tags: rudderstack/rudder-transformer:${{ needs.generate-tag-names.outputs.tag_name }}
      img_tag: ${{ needs.generate-tag-names.outputs.tag_name }}
      dockerfile: Dockerfile
      load_target: development
      push_target: production
      build_type: dt
      use_merge_sha: true
      skip_tests: ${{startsWith(github.event.pull_request.head.ref, 'hotfix-release/')}}
    secrets:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  create-pull-request:
    name: Update Helm Charts For Production and Create Pull Request
    runs-on: ubuntu-latest
    needs: [generate-tag-names, build-transformer-image]
    env:
      TAG_NAME: ${{ needs.generate-tag-names.outputs.tag_name }}
      TF_IMAGE_REPOSITORY: rudderstack/rudder-transformer
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.1
        with:
          fetch-depth: 1

      # In order to make a commit, we need to initialize a user.
      # You may choose to write something less generic here if you want, it doesn't matter functionality wise.
      - name: Initialize Mandatory Git Config
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "noreply@github.com"

      - name: Print Docker Image Tags
        run: |
          echo "Transformer: $TAG_NAME"

      - name: Clone Devops Repo
        run: |
          git clone https://${{secrets.PAT}}@github.com/rudderlabs/rudder-devops.git


      - name: Extract branch name
        id: extract_branch_name
        run: |
          cd rudder-devops
          branch_name=$(git rev-parse --abbrev-ref HEAD)
          echo "branch_name=$branch_name"
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

      - name: Update Helm Charts and Raise Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          cd rudder-devops
          git checkout -b shared-transformer-$TAG_NAME

          cd helm-charts/shared-services/per-az/environment/production
          yq eval -i ".rudder-transformer.image.tag=\"$TAG_NAME\"" production.yaml
          yq eval -i ".rudder-transformer.image.repository=\"$TF_IMAGE_REPOSITORY\"" production.yaml
          git add production.yaml

          yq eval -i ".rudder-transformer.image.tag=\"$TAG_NAME\"" enterprise/enterprise.yaml
          yq eval -i ".rudder-transformer.image.repository=\"$TF_IMAGE_REPOSITORY\"" enterprise/enterprise.yaml
          git add enterprise/enterprise.yaml

          yq eval -i ".rudder-transformer.image.tag=\"$TAG_NAME\"" multi-tenant/multi-tenant.yaml
          yq eval -i ".rudder-transformer.image.repository=\"$TF_IMAGE_REPOSITORY\"" multi-tenant/multi-tenant.yaml
          git add multi-tenant/multi-tenant.yaml

          cd ../../../../config-be-rudder-transformer/environment/prod
          yq eval -i ".config-be-rudder-transformer.image.tag=\"$TAG_NAME\"" base.yaml
          git add base.yaml

          git commit -m "chore: upgrade shared transformers to $TAG_NAME"
          git push -u origin shared-transformer-$TAG_NAME

          gh pr create --fill

      - name: Update Helm Chart and Raise Pull Request For Hosted Transformer
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          cd rudder-devops
          git checkout -b hosted-transformer-$TAG_NAME ${{steps.extract_branch_name.outputs.branch_name}}

          cd customer-objects/multi-tenant-us
          yq eval -i ".spec.transformer.image.version=\"$TAG_NAME\"" hostedmtedmt.yaml
          yq eval -i ".spec.transformer.image.repository=\"$TF_IMAGE_REPOSITORY\"" hostedmtedmt.yaml
          git add hostedmtedmt.yaml

          git commit -m "chore: upgrade hosted transformer to $TAG_NAME"
          git push -u origin hosted-transformer-$TAG_NAME

          gh pr create --fill

      - name: Clone Operator Repo
        run: |
          git clone https://${{secrets.PAT}}@github.com/rudderlabs/rudderstack-operator.git

      - name: Update helm charts and raise pull request for dedicated transformer from operator
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          cd rudderstack-operator
          git checkout -b dedicated-transformer-$TAG_NAME ${{steps.extract_branch_name.outputs.branch_name}}

          cd operator-helm/valuefiles
          yq eval -i ".transformer.image.version=\"$TAG_NAME\"" values.yaml
          yq eval -i ".transformer.image.repository=\"$TF_IMAGE_REPOSITORY\"" values.yaml
          git add values.yaml

          git commit -m "chore: upgrade dedicated transformer default version to $TAG_NAME"
          git push -u origin dedicated-transformer-$TAG_NAME

          gh pr create --fill

  update-ingestion-service:
    name: Update Ingestion Service with Latest Transformer Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.1
        with:
          fetch-depth: 1

      # In order to make a commit, we need to initialize a user.
      - name: Initialize Mandatory Git Config
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "noreply@github.com"

      - name: Get Latest Commit SHA
        id: get_sha
        run: |
          latest_sha=$(git rev-parse HEAD)
          echo "latest_sha=$latest_sha" >> $GITHUB_OUTPUT
          echo "Latest commit SHA: $latest_sha"

      - name: Clone Ingestion Service Repo
        run: |
          git clone https://${{secrets.PAT}}@github.com/rudderlabs/rudder-ingestion-svc.git

      - name: Get Go Version from Ingestion Service
        id: get_go_version
        run: |
          cd rudder-ingestion-svc
          go_version=$(grep "^go " go.mod | awk '{print $2}')
          echo "go_version=$go_version" >> $GITHUB_OUTPUT
          echo "Go version from ingestion service: $go_version"

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.get_go_version.outputs.go_version }}

      - name: Update go.mod with Latest Transformer Version
        id: update
        env:
          LATEST_SHA: ${{ steps.get_sha.outputs.latest_sha }}
        run: |
          cd rudder-ingestion-svc

          # Create a new branch for the update
          branch_name="chore.update-transformer-go-tests"

          # Delete the branch if it exists (both locally and remotely)
          git branch -D $branch_name 2>/dev/null || true
          git push origin --delete $branch_name 2>/dev/null || true

          # Create a new branch
          git checkout -b $branch_name

          # Update the go.mod file with the latest commit SHA using go get
          # This is the proper way to update Go dependencies
          go get github.com/rudderlabs/rudder-transformer/go@$LATEST_SHA

          # Run go mod tidy to clean up and update go.sum
          go mod tidy

          # Check if there are any changes
          if git diff --quiet; then
            echo "No changes to commit"
            echo "has_changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Commit the changes
          git add go.mod go.sum
          git commit -m "chore: update transformer-go to latest version"

          # Push the branch
          git push -u origin $branch_name

          # Set output to indicate changes were made
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        if: steps.update.outputs.has_changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          cd rudder-ingestion-svc

          # Create a pull request
          gh pr create \
            --title "chore: update transformer-go to latest version" \
            --body "This PR updates the rudder-transformer/go dependency to the latest version from the main branch." \
            --head ${{ steps.update.outputs.branch_name }} \
            --base main
